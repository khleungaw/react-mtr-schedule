{"version":3,"sources":["dictionary.tsx","components/Train.tsx","components/Platform.tsx","components/Station.tsx","components/Line.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["lineNames","lineColors","stationNames","stationSymbols","stationsList","destionationsList","Train","dest","seq","plat","ttnt","source","time","lineColor","valid","className","style","backgroundColor","toUpperCase","Platform","trains","direction","useState","JSX","setJSX","useEffect","undefined","map","train","key","Station","station","line","JSON","toHome","refresh","animationState","data","Object","keys","split","trainsInfo","length","directions","forEach","push","index","onClick","e","color","curr_time","Line","lineID","selectStationFunction","App","apiJSON","setApiJSON","currentStation","setStation","setAnimationState","callAPI","useCallback","fetch","then","res","status","json","setTimeout","selectStation","replace","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd4d7cec.chunk.js","sourcesContent":["export const lineNames: {[index: string]: string} = {\n  \"AEL\": \"Airport Express\",\n  \"TCL\": \"Tung Chung Line\",\n  \"WRL\": \"West Rail Line\",\n  \"TKL\": \"Tseung Kwan O Line\"\n}\n\nexport const lineColors: {[index:string] : string} = {\n  \"AEL\": \"#138889\",\n  \"TCL\": \"#F59448\",\n  \"WRL\": \"#B3158C\",\n  \"TKL\": \"#7D4C9B\"    \n}\n\nexport const stationNames: {[index: string]: string} = {\n  \"HOK\": \"Hong Kong\",\n  \"KOW\": \"Kowloon\",\n  \"TSY\": \"Tsing Yi\",\n  \"AIR\": \"Airport\",\n  \"AWE\": \"AsiaWorld-Expo\",\n  \"OLY\": \"Olympic\",\n  \"NAC\": \"Nam Cheong\",\n  \"LAK\": \"Lai King\",\n  \"SUN\": \"Sunny Bay\",\n  \"TUC\": \"Tung Chung\",\n  \"HUH\": \"Hung Hom\",\n  \"ETS\": \"East Tsim Sha Tsui\",\n  \"AUS\": \"Austin\",\n  \"MEF\": \"Mei Foo\",\n  \"TWW\": \"Tseung Wan West\",\n  \"KSR\": \"Kam Sheung Road\",\n  \"YUL\": \"Yuen Long\",\n  \"LOP\": \"Long Ping\",\n  \"TIS\": \"Tin Shui Wai\",\n  \"SIH\": \"Siu Hong\",\n  \"TUM\": \"Tuen Mun\",\n  \"NOP\": \"North Point\",\n  \"QUB\": \"Quarry Bay\",\n  \"YAT\": \"Yau Tong\",\n  \"TIK\": \"Tiu Keng Leng\",\n  \"TKO\": \"Tseung Kwan O\",\n  \"LHP\": \"Lohas Park\",\n  \"HAH\": \"Hang Hau\",\n  \"POA\": \"Po Lam\"\n}\n\nexport const stationSymbols: {[index: string]: string} = {\n  \"HONG_KONG\": \"HOK\",\n  \"KOWLOON\": \"KOW\",\n  \"TSING_YI\": \"TSY\",\n  \"AIRPORT\": \"AIR\",\n  \"ASIAWORLD-EXPO\": \"AWE\",\n  \"OLYMPIC\": \"OLY\",\n  \"NAM_CHEONG\": \"NAC\",\n  \"LAI_KING\": \"LAK\",\n  \"SUNNY_BAY\": \"SUN\",\n  \"TUNG_CHUNG\": \"TUC\",\n  \"HUNG_HOM\": \"HUH\",\n  \"EAST_TSIM_SHA_TSUI\": \"ETS\",\n  \"AUSTIN\": \"AUS\",\n  \"MEI_FOO\": \"MEF\",\n  \"TSUEN_WAN_WEST\": \"TWW\",\n  \"KAM_SHEUNG_ROAD\": \"KSR\",\n  \"YUEN_LONG\": \"YUL\",\n  \"LONG_PING\": \"LOP\",\n  \"TIN_SHUI_WAI\": \"TIS\",\n  \"SIU_HONG\": \"SIH\",\n  \"TUEN_MUN\": \"TUM\",\n  \"NORTH_POINT\": \"NOP\",\n  \"QUARRY_BAY\": \"QUB\",\n  \"YAU_TONG\": \"YAT\",\n  \"TIU_KENG_LENG\": \"TIK\",\n  \"TSEUNG_KWAN_O\": \"TKO\",\n  \"LOHAS_PARK\": \"LHP\",\n  \"HANG_HAU\": \"HAH\",\n  \"PO_LAM\": \"POA\"\n}\n\nexport const stationsList: {[index: string]: Array<string>} = {\n  \"AEL\" : [\"Hong Kong\", \"Kowloon\", \"Tsing Yi\", \"Airport\", \"AsiaWorld-Expo\"],\n  \"TCL\" : [\"Hong Kong\", \"Kowloon\", \"Olympic\", \"Nam Cheong\", \"Lai King\", \"Tsing Yi\", \"Sunny Bay\", \"Tung Chung\"],\n  \"WRL\" : [\"Hung Hom\", \"East Tsim Sha Tsui\", \"Austin\", \"Nam Cheong\", \"Mei Foo\", \"Tsuen Wan West\", \"Kam Sheung Road\", \"Yuen Long\", \"Long Ping\", \"Tin Shui Wai\", \"Siu Hong\", \"Tuen Mun\"],\n  \"TKL\" : [\"North Point\", \"Quarry Bay\", \"Yau Tong\", \"Tiu Keng Leng\", \"Tseung Kwan O\", \"Lohas Park\", \"Hang Hau\", \"Po Lam\"],\n}\n\nexport const destionationsList: {[index: string]: {[index: string]: string}} = {\n  \"AEL\": {\"UP\": \"AsiaWorld-Expo\", \"DOWN\": \"Hong Kong\"},\n  \"TCL\": {\"UP\": \"Tung Chung\", \"DOWN\": \"Hong Kong\"},\n  \"WRL\": {\"UP\": \"Tuen Mun\", \"DOWN\": \"Hung Hom\"},\n  \"TKL\": {\"UP\": \"Po Lam/Lohas Park\", \"DOWN\": \"North Point/Tiu Keng Leng\"}   \n};","import React from \"react\";\nimport { stationNames } from \"../dictionary\";\nimport { TrainProps } from \"../interfaces/Train.interface\";\nimport \"./Train.css\"\n\nfunction Train({dest, plat, seq, source, time, ttnt, valid, lineColor}: TrainProps) {\n\n  return(\n    <div className=\"train\" style={{backgroundColor: lineColor}}>\n      <div className=\"train-info-box\">\n        <span className=\"train-seq\">Train #{seq}</span>\n        <span className=\"train-info\">{ttnt} MINUTES</span>\n        <span className=\"train-description\">Till Arrival</span>\n      </div>\n\n      <div className=\"train-info-box\">\n        <span className=\"train-description\">Destionation</span>\n        <span className=\"train-info\">{stationNames[dest].toUpperCase()}</span>\n      </div>\n      \n\n    </div>\n  )\n}\n\nexport default Train;","import React, { useEffect, useState } from \"react\";\nimport { PlatformProps } from \"../interfaces/Platform.interface\";\nimport Train from \"./Train\";\nimport \"./Platform.css\"\n\nfunction Platform({trains, direction, lineColor}: PlatformProps) {\n  const [JSX, setJSX] = useState<Array<JSX.Element>>();\n\n  useEffect(\n    ()=>{\n      //Map trains as JSX elements\n      if (trains !== undefined) {\n        let map = trains.map(\n          (train)=>{return(<Train key={`${train.seq}_${train.ttnt}_${train.time}`} lineColor={lineColor} dest={train.dest} plat={train.plat} seq={train.seq} source={train.source} time={train.time} ttnt={train.ttnt} valid={train.valid} />)}\n        )\n\n        setJSX(map);\n      };\n    },\n    [trains, lineColor]\n  )\n\n  return(\n    <div className=\"platform\">\n      <header className=\"platform-header\">\n        <span>{direction}</span>\n      </header>\n      <div className=\"trains-list\">\n        {JSX}\n      </div>\n    </div>\n  )\n}\n\nexport default Platform;","import React, { useEffect, useState } from \"react\";\nimport { destionationsList, lineColors, stationNames } from \"../dictionary\";\nimport { StationProps } from \"../interfaces/Station.interface\";\nimport { TrainProps } from \"../interfaces/Train.interface\";\nimport Platform from \"./Platform\";\nimport \"./Station.css\"\n\nfunction Station({station, line, JSON, toHome, refresh, animationState}: StationProps) {\n  const [JSX, setJSX] = useState<Array<JSX.Element>>();\n\n  //Get line color\n  const lineColor = lineColors[line];\n\n  useEffect(\n    ()=>{\n      if (JSON.data === \"NULL\") {return;}\n      //Check if too many requests are sent\n      if (JSON.data === 429) {\n        setJSX(\n          [<span key=\"error\">You may have sent too many requests</span>]\n        );\n        return;\n      }\n      \n      //Check if internal server error is received\n      if (JSON.data === 500) {\n        setJSX(\n          [<span key=\"error\">Seems like something is wrong on MTR's server</span>]\n        );\n        return;\n      }\n\n      //Get key value\n      const key = Object.keys(JSON.data)[0];\n      //Get line\n      const line = key.split(\"-\")[0];\n\n      //Get a copy of the array using the key\n      interface TrainsInfo {[key: string] : Array<TrainProps>};\n      let data: any = JSON.data;\n      const trainsInfo: TrainsInfo = data[key] as TrainsInfo;\n\n      //Check data absence\n      if (Object.keys(trainsInfo).length === 2) {\n        setJSX(\n          [<span>Data is absent</span>]\n        );\n        return;\n      }\n\n      //Extract UP and DOWN, put them in an array with index 0 or 1\n      //If both of them exist, UP should have index 0 and DOWN should have index 1\n      //If trainsInfo only has 2 child, then something from the api is wrong \n      const directions: Array<string> = [];\n\n      Object.keys(trainsInfo).forEach(\n        (key)=>{if (key === \"DOWN\" || key === \"UP\") {directions.push(key);}}\n      );\n\n      //Map UP and DOWN as JSX elements\n      let map = directions.map(\n        (direction: string, index: number)=>{\n          let trains = trainsInfo[direction];\n          return(<Platform key={`${direction}${index}`} lineColor={lineColor} trains={trains} direction={`TRAINS TOWARDS ${destionationsList[line][direction].toUpperCase()}`}/>)\n        }\n      )\n      \n      setJSX(map);\n    },\n    [JSON, lineColor]\n  );\n\n  return(\n    <div className=\"station\">\n      <header className=\"station-header\">\n        <span onClick={(e)=>toHome(\"HOME\", \"HOME\")} className=\"station-button\">BACK</span>\n        <span>|</span>\n        <span onClick={(e)=>{refresh(line, station)}} className=\"station-button\">REFRESH</span>\n        <span>|</span>\n        <span style={{color: lineColor}}>{stationNames[station].toUpperCase()} </span>\n        <span>Last Updated: {JSON.curr_time}</span>\n      </header>\n      <div className={animationState ? \"platforms-list visible\" : \"platforms-list invisible\"}>\n        {JSX}\n      </div>\n    </div>\n  )\n}\n\nexport default Station;","import React, { useState, useEffect } from \"react\";\nimport { LineProps } from \"../interfaces/Line.interface\";\nimport \"./Line.css\";\nimport { lineColors, lineNames, stationsList } from \"../dictionary\";\n\nfunction Line({lineID, selectStationFunction}: LineProps) {\n  const [JSX, setJSX] = useState<Array<JSX.Element>>();\n\n  //Get line color\n  const lineColor = lineColors[lineID];\n\n  useEffect(\n    ()=>{\n      //Map stations in a line as JSX elements\n      const stations = stationsList[lineID];\n\n      let map = stations.map(\n        (station)=>{return(\n          <div key={`${lineID}${station}`} className=\"station-link\" onClick={(e)=>selectStationFunction(station, lineID)}>\n            <span className=\"station-circle\" style={{backgroundColor: lineColor}}></span>\n            <span>{station}</span>\n          </div>\n        );}\n      );\n\n      setJSX(map);\n    },\n    [lineID, selectStationFunction, lineColor]\n  )\n\n    \n  return(\n    <div className=\"line\" style={{color: lineColor}}>\n      <header className=\"line-header\">\n        <span>{lineNames[lineID]}</span>\n      </header>\n      <div className=\"stations-list\">\n        {JSX}\n      </div>\n    </div>\n  );\n}\n\nexport default Line;","import React, { useCallback, useState } from 'react';\nimport './App.css';\nimport Station from './components/Station';\nimport Line from './components/Line';\nimport { stationSymbols } from './dictionary';\n\nfunction App() {\n  const [apiJSON, setApiJSON] = useState({data: \"NULL\"});\n  const [currentStation, setStation] = useState<Array<string>>([\"HOME\", \"HOME\"]);\n  const [animationState, setAnimationState] = useState<boolean>(true);\n\n  const callAPI = useCallback(\n    (line: string , station: string)=>{\n      //Set animationState to false for refresh animation\n      setAnimationState(false);\n      //Fetch data from API\n      fetch(`https://rt.data.gov.hk/v1/transport/mtr/getSchedule.php?line=${line}&sta=${station}&lang=en`)\n        .then(res => {\n          if (res.status !== 200) {\n            //Return status code to display error\n            return {data: res.status};\n          } else {\n            return res.json();\n          }\n        })\n        .then(data => setApiJSON(data))\n        //Change currentStation (transition to next page) after JSON is changed\n        .then(()=>{\n          setStation([station, line]);\n          setTimeout(()=>setAnimationState(true), 300);\n        })\n    },\n    []\n  );\n\n  const selectStation = useCallback(\n    (station: string, line: string)=>{\n      //Set animationState to false for transition during stations selection or going back to home page\n      setAnimationState(false);\n      //Update currentStation\n      if (station === \"HOME\" && line === \"HOME\") {\n        setStation([\"HOME\", \"HOME\"]);\n        setTimeout(()=>setAnimationState(true), 300);\n      } else {  \n        callAPI(line, stationSymbols[station.replace(/ /g, \"_\").toUpperCase()]);\n        //setStation([stationSymbols[station.replace(/ /g, \"_\").toUpperCase()], line]);\n      }\n    },\n    [callAPI]\n  )\n\n  return (\n    <div className=\"app\">\n      {currentStation[0] === \"HOME\" &&\n        <div className={animationState ? \"line-list visible\" : \"line-list invisible\"}>\n          <span>Click on a station to view the scheduled trains</span>\n          <Line lineID=\"AEL\" selectStationFunction={selectStation}/>\n          <Line lineID=\"TCL\" selectStationFunction={selectStation}/>\n          <Line lineID=\"WRL\" selectStationFunction={selectStation}/>\n          <Line lineID=\"TKL\" selectStationFunction={selectStation}/>\n        </div>\n      }\n      {currentStation[0] !== \"HOME\" &&\n        <Station station={currentStation[0]} line={currentStation[1]} JSON={apiJSON} toHome={selectStation} refresh={callAPI} animationState={animationState}/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}